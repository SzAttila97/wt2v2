{"version":3,"sources":["logo.svg","stores/customer/customer.dispatcher.js","stores/worker/worker.dispatcher.js","stores/shutter/shutter.actions.js","stores/customer/customer.store.js","stores/customer/customer.actions.js","stores/shutter/shutter.store.js","modules/customer/Customer.js","stores/worker/worker.actions.js","stores/worker/worker.store.js","modules/worker/Worker.js","stores/manager/manager.dispatcher.js","stores/manager/manager.actions.js","stores/manager/manager.store.js","modules/manager/Manager.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","customer_dispatcher","Dispatcher","worker_dispatcher","shutter_actions","axios","get","then","resp","error","dispatcher","dispatch","type","data","shutters","catch","message","userId","FETCH_ORDERS_ERROR","FETCH_ORDERS_SUCCESS","orders","customerStore","action","UPDATE_USER","this","emit","SAVE_ORDER_ERROR","ACCEPT_ORDERS_ERROR","DECLINE_ORDERS_ERROR","ACCEPT_ORDERS_SUCCESS","find","e","_id","orderId","status","DECLINE_ORDERS_SUCCESS","EventEmitter","register","handleActions","bind","customer_actions","order","_this","post","Object","objectSpread","customerId","CustomerStore","getUser","fetchOrders","ShutterActions","fetchShutters","shutterStore","Customer","_React$Component","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","getOrders","getError","ShutterStore","getShutters","formWidth","formHeight","formColor","formMaterial","formSelectedPreset","formNet","formUserId","onUserChange","event","setState","target","value","onSizeChange","val","_val$split","split","_val$split2","slicedToArray","width","height","onHeightChange","onWidthChange","onColorChange","onMaterialChange","onNetChange","onSubmit","preventDefault","parseInt","color","material","isNet","CustomerActions","submitOrder","alert","inherits","createClass","key","_this2","on","_this3","react_default","a","createElement","className","onChange","onClick","updateLoggedInUser","map","i","shutter","shutterNet","shutterColor","shutterMaterial","price","class","acceptOrder","declineOrder","installationDate","name","id","min","filter","React","Component","worker_actions","workerStore","Worker","WorkerStore","louverAmount","cordLength","dye","screwAmount","net","netSize","onClickRow","selectedRow","Math","floor","onClickDone","stopPropagation","WorkerActions","doneOrder","console","log","takeOrder","manager_dispatcher","manager_actions","_this4","_this5","managerStore","Manager","ManagerStore","formDate","formPrice","formStatus","onPriceChange","onDateChange","onStatusChange","ManagerActions","priceOrder","okOrder","paidOrder","dateOrder","closedOrder","App","react_router_dom","href","role","aria-label","data-toggle","data-target","aria-controls","aria-expanded","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7310598f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {Dispatcher} from \"flux\";\r\nexport default new Dispatcher();","import {Dispatcher} from \"flux\";\r\nexport default new Dispatcher();","import axios from \"axios\";\r\nimport dispatcher from \"../worker/worker.dispatcher\";\r\nimport {FETCH_ORDERS_ERROR, FETCH_ORDERS_SUCCESS} from \"../customer/customer.actions\";\r\n\r\nexport const FETCH_SHUTTERS_SUCCESS = 'FETCH_SHUTTERS_SUCCESS';\r\nexport const FETCH_SHUTTERS_ERROR = 'FETCH_SHUTTERS_ERROR';\r\n\r\nclass ShutterActions {\r\n    fetchShutters() {\r\n        axios.get('http://localhost:8080/api/shutters').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_SHUTTERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_SHUTTERS_SUCCESS, shutters: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_SHUTTERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n    fetchOrders(userId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ShutterActions();","import dispatcher from './customer.dispatcher';\r\nimport {EventEmitter} from 'events';\r\nimport {\r\n    FETCH_ORDERS_SUCCESS,\r\n    FETCH_ORDERS_ERROR,\r\n    ACCEPT_ORDERS_ERROR,\r\n    DECLINE_ORDERS_ERROR,\r\n    ACCEPT_ORDERS_SUCCESS,\r\n    DECLINE_ORDERS_SUCCESS,\r\n    SAVE_ORDER_ERROR, UPDATE_USER\r\n} from \"./customer.actions\";\r\n\r\nclass CustomerStore extends EventEmitter {\r\n    orders = [];\r\n    error = '';\r\n    userId = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case UPDATE_USER:\r\n                this.userId = action.userId;\r\n                this.emit('userUpdated');\r\n                break;\r\n\r\n            case FETCH_ORDERS_SUCCESS:\r\n                this.orders = action.orders;\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case FETCH_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case SAVE_ORDER_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case ACCEPT_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case DECLINE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case ACCEPT_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'accepted';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DECLINE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'deleted';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getOrders() {\r\n        return this.orders;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n\r\n    getUser() {\r\n        return this.userId;\r\n    }\r\n}\r\n\r\nconst customerStore = new CustomerStore();\r\ndispatcher.register(customerStore.handleActions.bind(customerStore));\r\nexport default customerStore;","import dispatcher from './customer.dispatcher';\r\nimport axios from 'axios';\r\nimport ShutterActions from '../shutter/shutter.actions';\r\nimport CustomerStore from '../customer/customer.store';\r\n\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\n\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_ERROR = 'FETCH_ORDERS_ERROR';\r\n\r\nexport const ACCEPT_ORDERS_SUCCESS = 'ACCEPT_ORDERS_SUCCESS';\r\nexport const ACCEPT_ORDERS_ERROR = 'ACCEPT_ORDERS_ERROR';\r\n\r\nexport const DECLINE_ORDERS_SUCCESS = 'DECLINE_ORDERS_SUCCESS';\r\nexport const DECLINE_ORDERS_ERROR = 'DECLINE_ORDERS_ERROR';\r\n\r\nexport const SAVE_ORDER_ERROR = 'SAVE_ORDER_ERROR';\r\n\r\nclass CustomerActions {\r\n    updateLoggedInUser(userId) {\r\n        dispatcher.dispatch({type: UPDATE_USER, userId: userId});\r\n    }\r\n\r\n    fetchOrders(userId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    submitOrder(order) {\r\n        axios.post('http://localhost:8080/api/orders', {...order, customerId: CustomerStore.getUser()}).then(resp => {\r\n            if (resp.data.error) {\r\n                dispatcher.dispatch({type: SAVE_ORDER_ERROR, error: resp.data.error});\r\n            } else {\r\n                this.fetchOrders(CustomerStore.getUser());\r\n                ShutterActions.fetchShutters();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: SAVE_ORDER_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    acceptOrder(userId, orderId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders/' + orderId + '/accept').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: ACCEPT_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: ACCEPT_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: ACCEPT_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    declineOrder(userId, orderId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders/' + orderId + '/decline').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: DECLINE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: DECLINE_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: DECLINE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new CustomerActions();","import {EventEmitter} from \"events\";\r\nimport dispatcher from \"../worker/worker.dispatcher\";\r\nimport {FETCH_SHUTTERS_SUCCESS, FETCH_SHUTTERS_ERROR} from \"./shutter.actions\";\r\n\r\nclass ShutterStore extends EventEmitter {\r\n    shutters = [];\r\n    error = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case FETCH_SHUTTERS_SUCCESS:\r\n                this.shutters = action.shutters;\r\n                this.emit(\"shuttersUpdated\");\r\n                break;\r\n\r\n            case FETCH_SHUTTERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getShutters() {\r\n        return this.shutters;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n}\r\n\r\nconst shutterStore = new ShutterStore();\r\ndispatcher.register(shutterStore.handleActions.bind(shutterStore));\r\nexport default shutterStore;","import React from 'react';\r\nimport CustomerActions from '../../stores/customer/customer.actions';\r\nimport CustomerStore from '../../stores/customer/customer.store';\r\nimport ShutterStore from '../../stores/shutter/shutter.store';\r\nimport ShutterActions from '../../stores/shutter/shutter.actions';\r\n\r\nexport class Customer extends React.Component {\r\n    state = {\r\n        userId: CustomerStore.getUser(),\r\n        orders: CustomerStore.getOrders(),\r\n        error: CustomerStore.getError() || ShutterStore.getError(),\r\n        shutters: ShutterStore.getShutters(),\r\n        formWidth: '',\r\n        formHeight: '',\r\n        formColor: 'White',\r\n        formMaterial: 'Plastic',\r\n        formSelectedPreset: '',\r\n        formNet: 0,\r\n        formUserId: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.orders.length === 0 && this.state.userId) {\r\n            CustomerActions.fetchOrders(this.state.userId);\r\n        }\r\n        if (this.state.shutters.length === 0) {\r\n            ShutterActions.fetchShutters();\r\n        }\r\n\r\n        CustomerStore.on('userUpdated', () => {\r\n            this.setState({\r\n                userId: CustomerStore.getUser()\r\n            }, () => {\r\n                if (this.state.userId) {\r\n                    CustomerActions.fetchOrders(this.state.userId);\r\n                }\r\n            });\r\n        });\r\n\r\n        CustomerStore.on('ordersUpdated', () => {\r\n            this.setState({\r\n                orders: CustomerStore.getOrders()\r\n            });\r\n        });\r\n\r\n        CustomerStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: CustomerStore.getError()\r\n            });\r\n        });\r\n\r\n        ShutterStore.on('shuttersUpdated', () => {\r\n            this.setState({\r\n                shutters: ShutterStore.getShutters()\r\n            });\r\n        });\r\n\r\n        ShutterStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: ShutterStore.getError()\r\n            });\r\n        });\r\n    }\r\n\r\n     /*onUserChange = (event) => {\r\n         CustomerActions.updateLoggedInUser(event.target.value);\r\n     };\r\n\r\n\r\n     onLoginClick = (event) => {\r\n         CustomerActions.updateLoggedInUser(event.target.value);\r\n     };*/\r\n\r\n    onUserChange = (event) => {\r\n        this.setState({\r\n            formUserId: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n\r\n    onSizeChange = (event) => {\r\n        const val = event.target.value;\r\n        this.setState({\r\n            formSelectedPreset: event.target.value,\r\n        });\r\n        if (val) {\r\n            const [width, height] = val.split('x');\r\n            this.setState({\r\n                formWidth: width,\r\n                formHeight: height\r\n            });\r\n        }\r\n    };\r\n\r\n    onHeightChange = (event) => {\r\n        this.setState({\r\n            formSelectedPreset: '',\r\n            formHeight: event.target.value\r\n        });\r\n    };\r\n\r\n    onWidthChange = (event) => {\r\n        this.setState({\r\n            formSelectedPreset: '',\r\n            formWidth: event.target.value\r\n        });\r\n    };\r\n\r\n    onColorChange =(event) => {\r\n        this.setState({\r\n            formColor: event.target.value\r\n        });\r\n    }\r\n\r\n    onMaterialChange =(event) => {\r\n        this.setState({\r\n            formMaterial: event.target.value\r\n        });\r\n    }\r\n\r\n    onNetChange = (event) => {\r\n        this.setState({\r\n            formNet: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!this.state.formWidth || !this.state.formHeight || !this.state.formColor ||!this.state.formMaterial) {\r\n            alert('Hiányzó adat!');\r\n            return;\r\n        }\r\n\r\n        const order = {\r\n            width: parseInt(this.state.formWidth),\r\n            height: parseInt(this.state.formHeight),\r\n            color: this.state.formColor,\r\n            material: this.state.formMaterial,\r\n            isNet: this.state.formNet\r\n        };\r\n\r\n        CustomerActions.submitOrder(order);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"customer-wrapper\">\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                {this.state.userId === '' ?\r\n\r\n                <div className=\"row \">\r\n                    <div className=\"col-md-2\"><h5>Please Log in!</h5></div>\r\n                    <div className=\"col-md-2\">\r\n                            {/*<select className=\"form-control\" value={this.state.userId} onChange={this.onUserChange}>\r\n                                <option value=\"\">Logged out</option>\r\n                                <option value=\"1\">Customer 1</option>\r\n                                <option value=\"2\">Customer 2</option>\r\n                            </select>*/}\r\n                            <input onChange={this.onUserChange} value={this.state.formUserId}\r\n                                   type=\"string\"\r\n                                   className=\"form-control\"/>\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <button className=\"btn btn-primary\" onClick={() =>  CustomerActions.updateLoggedInUser(this.state.formUserId)}>\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                    :\r\n                    <div>\r\n                        <h2>Welcome {this.state.userId}!</h2>\r\n                    </div>\r\n                }\r\n\r\n\r\n                {\r\n                    this.state.userId ?\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8\">\r\n                                <h2>Shopping Cart</h2>\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"table table-condensed table-striped\">\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th>Order ID</th>\r\n                                            <th>Size</th>\r\n                                            <th>Net</th>\r\n                                            <th>Color</th>\r\n                                            <th>Material</th>\r\n                                            <th>Price Offer</th>\r\n                                            <th></th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {this.state.orders.map((value, i) => {\r\n                                            if (value.status !== 'declined')return (\r\n                                                <tr key={i}>\r\n                                                    <td>{value._id}</td>\r\n                                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                                    <td>{value.shutterColor}</td>\r\n                                                    <td>{value.shutterMaterial}</td>\r\n                                                    <td>{value.price}</td>\r\n                                                    <td>\r\n                                                        {value.status === 'priced' //&& value.price !== null//\r\n                                                            ?\r\n                                                            <div>\r\n                                                                <button type=\"button\" class=\"btn btn-success btn-block\"\r\n                                                                    onClick={() => CustomerActions.acceptOrder(this.state.userId, value._id)}>\r\n                                                                    Accept\r\n                                                                </button>\r\n                                                                <button type=\"button\" class=\"btn btn-danger btn-block\"\r\n                                                                    onClick={() => CustomerActions.declineOrder(this.state.userId, value._id)}>\r\n                                                                    Decline\r\n                                                                </button>\r\n                                                            </div>\r\n                                                            :\r\n                                                            null\r\n                                                        }\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {value.installationDate ?\r\n                                                        <div>{value.installationDate}</div>\r\n                                                        :\r\n                                                        null}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <h2>New Item</h2>\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Shutter types</label>\r\n                                        <select onChange={this.onSizeChange} value={this.state.formSelectedPreset}\r\n                                                className=\"form-control\" name=\"\" id=\"\">\r\n                                            <option value=\"\">Sizes</option>\r\n                                            {this.state.shutters.map((val, i) => {\r\n                                                return <option key={i}\r\n                                                               value={val.width + 'x' + val.height}>{val.width} x {val.height}</option>\r\n                                            })};\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Height</label>\r\n                                        <input onChange={this.onHeightChange} value={this.state.formHeight} type=\"number\" min=\"1\"\r\n                                               className=\"form-control\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Width</label>\r\n                                        <input onChange={this.onWidthChange} value={this.state.formWidth} type=\"number\" min=\"1\"\r\n                                               className=\"form-control\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Color</label>\r\n                                        <select onChange={this.onColorChange} name=\"\" id=\"\" value={this.state.formColor}\r\n                                                className=\"form-control\">\r\n                                            <option value=\"White\">White</option>\r\n                                            <option value=\"Black\">Black</option>\r\n                                            <option value=\"Brown\">Brown</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Color</label>\r\n                                        <select onChange={this.onMaterialChange} name=\"\" id=\"\" value={this.state.formMaterial}\r\n                                                className=\"form-control\">\r\n                                            <option value=\"Plastic\">Plastic</option>\r\n                                            <option value=\"Aluminium\">Aluminium</option>\r\n                                            <option value=\"Wood\">Wood</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Net</label>\r\n                                        <select onChange={this.onNetChange} name=\"\" id=\"\" value={this.state.formNet}\r\n                                                className=\"form-control\">\r\n                                            <option value=\"1\">Yes</option>\r\n                                            <option value=\"0\">No</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <button className=\"btn btn-primary\">Add to cart</button>\r\n                                </form>\r\n                            </div>\r\n\r\n                            {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                           {/* <div className=\"table-responsive\">\r\n                                <table className=\"table table-condensed table-striped table-dark\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th>OrderID</th>\r\n                                        <th>Size</th>\r\n                                        <th>Net</th>\r\n                                        <th>Color</th>\r\n                                        <th>Material</th>\r\n                                        <th>Price</th>\r\n                                        <th>Installation Date</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.state.orders.filter(e => e.status === 'closed').map((value, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td>{value._id}</td>\r\n                                                <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                                <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                                <td>{value.shutterColor}</td>\r\n                                                <td>{value.shutterMaterial}</td>\r\n                                                <td>{value.price}</td>\r\n                                                <td>{value.installationDate}</td>\r\n                                                <td>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                    </tbody>\r\n                                </table>\r\n                                {this.state.orders.filter(e => e.status === 'closed').map((value, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>{value._id}</td>\r\n                                            <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                            <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                            <td>{value.shutterColor}</td>\r\n                                            <td>{value.shutterMaterial}</td>\r\n                                            <td>{value.price}</td>\r\n                                            <td>{value.installationDate}</td>\r\n                                            <td>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </div>*/}\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-10\">\r\n                                    <h2>Invoices</h2>\r\n                                    {this.state.orders.filter(e => e.status === 'closed').map((value, i) => {\r\n                                        return (\r\n                                            <ul className=\"list-group\" key={i}>\r\n                                                <li className=\"list-group-item\">Order Id: {value._id}</li>\r\n                                                <li className=\"list-group-item\">Shutter size: {value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</li>\r\n                                                <li className=\"list-group-item\">Mosquito net: {value.shutterNet ? 'Yes' : 'No'}</li>\r\n                                                <li className=\"list-group-item\">Color: {value.shutterColor}</li>\r\n                                                <li className=\"list-group-item\">Material: {value.shutterMaterial}</li>\r\n                                                <li className=\"list-group-item\">Price: {value.price}</li>\r\n                                                <li className=\"list-group-item\">Installation Date: {value.installationDate}</li>\r\n                                                <li className=\"list-group-item-flush\">/*{i}*/</li>\r\n                                            </ul>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    : null\r\n\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import dispatcher from './worker.dispatcher';\r\nimport axios from 'axios';\r\n\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_ERROR = 'FETCH_ORDERS_ERROR';\r\n\r\nexport const TAKE_ORDERS_SUCCESS = 'TAKE_ORDERS_SUCCESS';\r\nexport const TAKE_ORDERS_ERROR = 'TAKE_ORDERS_ERROR';\r\n\r\nexport const DONE_ORDERS_SUCCESS = 'DONE_ORDERS_SUCCESS';\r\nexport const DONE_ORDERS_ERROR = 'DONE_ORDERS_ERROR';\r\n\r\nclass WorkerActions {\r\n\r\n    fetchOrders() {\r\n        axios.get('http://localhost:8080/api/worker/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n\r\n    takeOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/worker/orders/' + orderId + '/take').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: TAKE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: TAKE_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: TAKE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    doneOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/worker/orders/' + orderId + '/done').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: DONE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: DONE_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: DONE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new WorkerActions();","import dispatcher from './worker.dispatcher';\r\nimport {EventEmitter} from 'events';\r\nimport {\r\n    FETCH_ORDERS_SUCCESS,\r\n    FETCH_ORDERS_ERROR,\r\n    TAKE_ORDERS_ERROR,\r\n    DONE_ORDERS_ERROR,\r\n    TAKE_ORDERS_SUCCESS,\r\n    DONE_ORDERS_SUCCESS\r\n} from \"./worker.actions\";\r\n\r\nclass WorkerStore extends EventEmitter {\r\n    orders = [];\r\n    error = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case FETCH_ORDERS_SUCCESS:\r\n                this.orders = action.orders;\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case FETCH_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case TAKE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case DONE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case TAKE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'taken';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DONE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'done';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getOrders() {\r\n        return this.orders;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n\r\n}\r\n\r\nconst workerStore = new WorkerStore();\r\ndispatcher.register(workerStore.handleActions.bind(workerStore));\r\nexport default workerStore;","import React from \"react\";\r\nimport WorkerStore from \"../../stores/worker/worker.store\";\r\nimport WorkerActions from \"../../stores/worker/worker.actions\"\r\n\r\nexport class Worker extends React.Component {\r\n\r\n    state = {\r\n        orders: WorkerStore.getOrders(),\r\n        error: WorkerStore.getError(),\r\n        louverAmount: 0,\r\n        cordLength: 0,\r\n        dye: 0,\r\n        screwAmount: 0,\r\n        material: \"\",\r\n        color: \"\",\r\n        net:0,\r\n        netSize: 0,\r\n        orderId: 0\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.orders.length === 0) {\r\n            WorkerActions.fetchOrders();\r\n        }\r\n\r\n        WorkerStore.on('ordersUpdated', () => {\r\n            this.setState({\r\n                orders: WorkerStore.getOrders()\r\n            });\r\n        });\r\n\r\n\r\n        WorkerStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: WorkerStore.getError()\r\n            });\r\n        });\r\n    }\r\n\r\n    onClickRow = (selectedRow) => {\r\n        const louverAmount = Math.floor(selectedRow.shutter.height / 5);\r\n        const cordLength = selectedRow.shutter.height * 2;\r\n        const dye = selectedRow.shutter.width / 20;\r\n        const screwAmount = Math.floor(selectedRow.shutter.width /20);\r\n        const netSize = Math.floor((selectedRow.shutter.height + selectedRow.shutter.width)*1.1)\r\n        this.setState({\r\n            selectedRow: selectedRow,\r\n            louverAmount: louverAmount,\r\n            cordLength: cordLength,\r\n            dye: dye,\r\n            screwAmount: screwAmount,\r\n            material: selectedRow.shutterMaterial,\r\n            color:selectedRow.shutterColor,\r\n            net:selectedRow.shutterNet,\r\n            netSize: netSize,\r\n            orderId : selectedRow._id\r\n        });\r\n    };\r\n\r\n    onClickDone = (event, i) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            selectedRow: null,\r\n        }, () => {\r\n            WorkerActions.doneOrder(i);\r\n            console.log(this.state.selectedRow)\r\n        });\r\n    };\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <div className=\"worker-wrapper\">\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <h2>Orders</h2>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-condensed table-striped\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Order ID</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.state.orders.map((value, i) => {\r\n                                    if (value.status === 'accepted')return (\r\n                                        <tr key={i}>\r\n                                            <td>{value._id}</td>\r\n                                            <td>\r\n                                                {value.status === 'accepted'\r\n                                                    ?\r\n                                                    <div>\r\n                                                        <button className=\"btn btn-primary\" onClick={() => WorkerActions.takeOrder(value._id)}>\r\n                                                           Take Order!\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    :\r\n                                                    null\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div><div className=\"col-md-8\">\r\n                        <h2>My Jobs</h2>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-condensed table-striped\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Order Informations</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.state.orders.map((value, i) => {\r\n                                    if (value.status === 'taken') return (\r\n                                        <tr key={i} onClick={this.onClickRow.bind(this ,value)}>\r\n                                            <td>{value._id}</td>\r\n                                            <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                            <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                            <td>{value.shutterColor}</td>\r\n                                            <td>{value.shutterMaterial}</td>\r\n                                            <td>{value.status}</td>\r\n                                            <td>\r\n                                                {value.status === 'taken'\r\n                                                    ?\r\n                                                    <div>\r\n                                                        <button className=\"btn btn-primary\" onClick={(event) => this.onClickDone(event, value._id)}>\r\n                                                            Done!\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    :\r\n                                                    null\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    { !this.state.selectedRow ?\r\n                        null\r\n                        :\r\n                        <div>\r\n                            <div className=\"card text-white bg-dark col-md-6\">\r\n                                <div className=\"card-header text-dark bg-light\">\r\n                                    Required Parts\r\n                                    ({this.state.orderId})\r\n                                </div>\r\n                                <ul className=\"list-group list-group-flush \">\r\n                                    <li className=\"list-group-item text-white bg-dark\">Screw x {this.state.screwAmount}</li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">{this.state.louverAmount} {this.state.material} louvers</li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">Cord : {this.state.cordLength} cm</li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">{this.state.dye} Deciliter {this.state.color} dye </li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">Mosquito net: {this.state.net ? 'Yes, ' : 'No' } {this.state.net ? this.state.netSize + ' cm ' : null } </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import {Dispatcher} from \"flux\";\r\nexport default new Dispatcher();","import dispatcher from './manager.dispatcher';\r\nimport axios from 'axios';\r\nimport CustomerActions from '../customer/customer.actions';\r\n\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_ERROR = 'FETCH_ORDERS_ERROR';\r\n\r\nexport const OK_ORDERS_SUCCESS = 'OK_ORDERS_SUCCESS';\r\nexport const OK_ORDERS_ERROR = 'OK_ORDERS_ERROR';\r\n\r\n/*export const DATED_ORDERS_SUCCESS = 'DATED_ORDERS_SUCCESS';\r\nexport const DATED_ORDERS_ERROR = 'DATED_ORDERS_ERROR';*/\r\n\r\nexport const PAID_ORDERS_SUCCESS = 'PAID_ORDERS_SUCCESS';\r\nexport const PAID_ORDERS_ERROR = 'PAID_ORDERS_ERROR';\r\n\r\nexport const PRICED_ORDERS_SUCCESS = 'PRICED_ORDERS_SUCCESS';\r\nexport const PRICED_ORDERS_ERROR = 'PRICED_ORDERS_ERROR';\r\n\r\nexport const CLOSED_ORDERS_SUCCESS = 'CLOSED_ORDERS_SUCCESS';\r\nexport const CLOSED_ORDERS_ERROR = 'CLOSED_ORDERS_ERROR';\r\n\r\nexport const PRICE_ORDERS_SUCCESS = 'PRICE_ORDERS_SUCCESS';\r\nexport const PRICE_ORDERS_ERROR = 'PRICE_ORDERS_ERROR';\r\n\r\nexport const DATE_ORDERS_SUCCESS = 'DATE_ORDERS_SUCCESS';\r\nexport const DATE_ORDERS_ERROR = 'DATE_ORDERS_ERROR';\r\n\r\nclass ManagerActions {\r\n    fetchOrders() {\r\n        axios.get('http://localhost:8080/api/manager/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    okOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/ok').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: OK_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: OK_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: OK_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    /*datedOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/delete').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: DATED_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: DATED_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: DATED_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }*/\r\n\r\n    paidOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/paid').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PAID_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PAID_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PAID_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    /*pricedOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/priced').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PRICED_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PRICED_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PAID_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }*/\r\n\r\n    closedOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/closed').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: CLOSED_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: CLOSED_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: CLOSED_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    priceOrder(orderId, price) {\r\n        axios.post('http://localhost:8080/api/manager/orders/' + orderId + '/' + price + '/update-price').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n    dateOrder(orderId, installationDate) {\r\n        axios.post('http://localhost:8080/api/manager/orders/' + orderId + '/' + installationDate + '/update-installationDate').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ManagerActions();","import dispatcher from './manager.dispatcher';\r\nimport {EventEmitter} from 'events';\r\nimport {\r\n    FETCH_ORDERS_SUCCESS,\r\n    FETCH_ORDERS_ERROR,\r\n    OK_ORDERS_ERROR,\r\n    // DATED_ORDERS_ERROR,\r\n    OK_ORDERS_SUCCESS,\r\n    // DATED_ORDERS_SUCCESS,\r\n    PAID_ORDERS_ERROR,\r\n    CLOSED_ORDERS_ERROR,\r\n    PAID_ORDERS_SUCCESS,\r\n    CLOSED_ORDERS_SUCCESS,\r\n    PRICE_ORDERS_ERROR,\r\n    PRICE_ORDERS_SUCCESS,\r\n    DATE_ORDERS_ERROR,\r\n    DATE_ORDERS_SUCCESS\r\n} from \"./manager.actions\";\r\n\r\nclass ManagerStore extends EventEmitter {\r\n    orders = [];\r\n    error = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case FETCH_ORDERS_SUCCESS:\r\n                this.orders = action.orders;\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case FETCH_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case OK_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'ok';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case OK_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            /*case DATED_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'dated';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DATED_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;*/\r\n\r\n            case PAID_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'paid';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case PAID_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case CLOSED_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'closed';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case CLOSED_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case PRICE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).price = action.price;\r\n                this.orders.find(e => e._id === action.orderId).status = 'priced';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case PRICE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n                case DATE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).installationDate = action.installationDate;\r\n                this.orders.find(e => e._id === action.orderId).status = 'dated';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DATE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getOrders() {\r\n        return this.orders;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n}\r\n\r\nconst managerStore = new ManagerStore();\r\ndispatcher.register(managerStore.handleActions.bind(managerStore));\r\nexport default managerStore;","import React from \"react\";\r\nimport ManagerStore from \"../../stores/manager/manager.store\";\r\n// import WorkerStore from \"../../stores/worker/worker.store\";\r\nimport ManagerActions from \"../../stores/manager/manager.actions\";\r\n\r\nexport class Manager extends React.Component {\r\n\r\n    state = {\r\n        orders: ManagerStore.getOrders(),\r\n        error: ManagerStore.getError(),\r\n        formDate: '',\r\n        formPrice: '',\r\n        formStatus: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.orders.length === 0) {\r\n            ManagerActions.fetchOrders();\r\n        }\r\n\r\n        ManagerStore.on('ordersUpdated', () => {\r\n            this.setState({\r\n                orders: ManagerStore.getOrders()\r\n            });\r\n        });\r\n        // WorkerStore.on('ordersUpdated', () => {\r\n        //     this.setState({\r\n        //         orders: WorkerStore.getOrders()\r\n        //     });\r\n        // });\r\n\r\n        ManagerStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: ManagerStore.getError()\r\n            });\r\n        });\r\n    }\r\n\r\n    onPriceChange = (event) => {\r\n        this.setState({\r\n            formPrice: event.target.value\r\n        });\r\n    };\r\n\r\n    onDateChange = (event) => {\r\n        this.setState({\r\n            formDate: event.target.value\r\n        });\r\n    };\r\n\r\n    onStatusChange = (event) => {\r\n        this.setState({\r\n            formStatus: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"manager-wrapper\">\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <h2>Set Prices</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerID</th>\r\n                            <th>Size</th>\r\n                            <th>Net</th>\r\n                            <th>Color</th>\r\n                            <th>Material</th>\r\n                            <th>Price</th>\r\n                            <th></th>\r\n                            <th><input onChange={this.onPriceChange} value={this.state.formPrice}\r\n                                            type=\"number\" min=\"1\"\r\n                                            className=\"form-control\"/>\r\n                            </th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'pending' && value.price !== 0)return(\r\n\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                    <td>{value.shutterColor}</td>\r\n                                    <td>{value.shutterMaterial}</td>\r\n                                    <td>{value.price}</td>\r\n                                    <td>{value.status}</td>\r\n                                    <td>\r\n\r\n                                    </td>\r\n                                    <td>\r\n                                        <button className=\"btn btn-success\" onClick={() => ManagerActions.priceOrder(value._id, this.state.formPrice)}>\r\n                                            Offer!\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                <h2>Accept jobs</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'done') return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>\r\n                                        <button  className=\"btn btn-light\" onClick={() => ManagerActions.okOrder(value._id)}>\r\n                                            Accept Job!\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                <h2>Organize Installation</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerId</th>\r\n                            <th>Date</th>\r\n                            <th></th>\r\n                            <th><input onChange={this.onDateChange} value={this.state.formDate}\r\n                                       type=\"date\"\r\n                                       className=\"form-control\"/>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'ok' || value.status === 'dated') return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.installationDate}</td>\r\n                                    <td></td>\r\n                                    <td>\r\n\r\n                                        {value.status === 'dated' ?\r\n                                            <button className=\"btn btn-outline-success btn-block\" onClick={() => ManagerActions.paidOrder(value._id)}>\r\n                                                Paid!\r\n                                            </button>\r\n                                        :\r\n                                            <button className=\"btn btn-outline-warning btn-block\" onClick={() => ManagerActions.dateOrder(value._id, this.state.formDate)}>\r\n                                                Set Date!\r\n                                            </button>\r\n                                       }\r\n\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <h2>Close Order / Create Invoice</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerID</th>\r\n                            <th>Size</th>\r\n                            <th>Net</th>\r\n                            <th>Color</th>\r\n                            <th>Material</th>\r\n                            <th>Price</th>\r\n                            <th>Date</th>\r\n                            <th>Status</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'paid')return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                    <td>{value.shutterColor}</td>\r\n                                    <td>{value.shutterMaterial}</td>\r\n                                    <td>{value.price}</td>\r\n                                    <td>{value.installationDate}</td>\r\n                                    <td>{value.status}</td>\r\n                                    <td>\r\n                                        <button className=\"btn btn-primary\" onClick={() => ManagerActions.closedOrder(value._id)}>\r\n                                           Create Invoice!\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <h2>Statistics</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerID</th>\r\n                            <th>Size</th>\r\n                            <th>Net</th>\r\n                            <th>Color</th>\r\n                            <th>Material</th>\r\n                            <th>Date</th>\r\n                            <th>Price</th>\r\n                            <th>Status</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                    <td>{value.shutterColor}</td>\r\n                                    <td>{value.shutterMaterial}</td>\r\n                                    <td>{value.installationDate}</td>\r\n                                    <td>{value.price}</td>\r\n                                    <td>{value.status}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <select onChange={this.onStatusChange} value={this.state.formStatus}\r\n                        className=\"form-control\" name=\"\" id=\"\">\r\n                    <option value=\"\">Status</option>\r\n                    {this.state.orders.map((val, i) => {\r\n                        return <option key={i}\r\n                                       value={val.status}>{val.status}</option>\r\n                    })};\r\n                </select>\r\n                <div>\r\n\r\n                    {this.state.orders.filter(e => e.status === this.state.formStatus).map((value, i) => {\r\n                        return (\r\n                            <li className=\"list-group-item-flush\">{i+1}</li>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Route, BrowserRouter as Router, Link} from \"react-router-dom\";\nimport {Customer} from \"./modules/customer/Customer\";\nimport {Worker} from \"./modules/worker/Worker\";\nimport {Manager} from \"./modules/manager/Manager\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n          <Router>\n              <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                  <a className=\"navbar-brand\" href=\"./\"><span role=\"image\" aria-label=\"bee\">🐝</span>BeeShutter! BeeAwesome!</a>\n                  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                          data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                          aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                      <span className=\"navbar-toggler-icon\"></span>\n                  </button>\n\n                  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                      <ul className=\"navbar-nav mr-auto\">\n                          <li className=\"nav-item\">\n                              <Link className=\"nav-link\" to=\"/\">\n                                  Customer\n                              </Link>\n                          </li>\n                          <li className=\"nav-item\">\n                              <Link className=\"nav-link\" to=\"/worker\">\n                                  Worker\n                              </Link>\n                          </li>\n                          <li className=\"nav-item\">\n                              <Link className=\"nav-link\"  to=\"/manager\">\n                                  Manager\n                              </Link>\n                          </li>\n                      </ul>\n                  </div>\n              </nav>\n              <Route exact path=\"/\" component={Customer}/>\n              <Route exact path=\"/worker\" component={Worker}/>\n              <Route exact path=\"/manager\" component={Manager}/>\n          </Router>\n\n\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}