{"version":3,"sources":["logo.svg","stores/customer/customer.dispatcher.js","stores/worker/worker.dispatcher.js","stores/shutter/shutter.actions.js","stores/customer/customer.store.js","stores/manager/manager.dispatcher.js","stores/manager/manager.actions.js","stores/worker/worker.actions.js","stores/customer/customer.actions.js","stores/shutter/shutter.store.js","modules/customer/Customer.js","stores/worker/worker.store.js","modules/worker/Worker.js","stores/manager/manager.store.js","modules/manager/Manager.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","customer_dispatcher","Dispatcher","worker_dispatcher","shutter_actions","axios","get","then","resp","error","dispatcher","dispatch","type","data","shutters","catch","message","userId","FETCH_ORDERS_ERROR","FETCH_ORDERS_SUCCESS","orders","customerStore","action","UPDATE_USER","this","emit","SAVE_ORDER_ERROR","ACCEPT_ORDERS_ERROR","DECLINE_ORDERS_ERROR","ACCEPT_ORDERS_SUCCESS","find","e","_id","orderId","status","DECLINE_ORDERS_SUCCESS","EventEmitter","register","handleActions","bind","manager_dispatcher","manager_actions","_this","fetchOrders","_this2","_this3","CustomerActions","price","_this4","post","installationDate","_this5","worker_actions","ManagerAction","customer_actions","order","Object","objectSpread","customerId","CustomerStore","getUser","ShutterActions","fetchShutters","ManagerActions","WorkerActions","shutterStore","Customer","_React$Component","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","getOrders","getError","ShutterStore","getShutters","formWidth","formHeight","formColor","formMaterial","formSelectedPreset","formNet","formUserId","tmpOrders","onUserChange","event","setState","target","value","onSizeChange","val","_val$split","split","_val$split2","slicedToArray","width","height","onHeightChange","onWidthChange","onColorChange","onMaterialChange","onNetChange","onSubmit","preventDefault","shutter","parseInt","shutterNet","shutterColor","shutterMaterial","color","material","isNet","alert","onOrder","forEach","submitOrder","onDeleteOrderItem","i","filter","index","inherits","createClass","key","on","react_default","a","createElement","className","onChange","onClick","updateLoggedInUser","map","acceptOrder","declineOrder","name","id","min","React","Component","workerStore","Worker","WorkerStore","louverAmount","cordLength","dye","screwAmount","net","netSize","onClickRow","selectedRow","Math","floor","onClickDone","stopPropagation","doneOrder","console","log","takeOrder","managerStore","Manager","ManagerStore","formDate","formPrice","formStatus","onPriceChange","onDateChange","onStatusChange","priceOrder","okOrder","paidOrder","dateOrder","closedOrder","reduce","prev","push","App","react_router_dom","href","role","aria-label","data-toggle","data-target","aria-controls","aria-expanded","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c4d3bd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {Dispatcher} from \"flux\";\r\nexport default new Dispatcher();","import {Dispatcher} from \"flux\";\r\nexport default new Dispatcher();","import axios from \"axios\";\r\nimport dispatcher from \"../worker/worker.dispatcher\";\r\nimport {FETCH_ORDERS_ERROR, FETCH_ORDERS_SUCCESS} from \"../customer/customer.actions\";\r\n\r\nexport const FETCH_SHUTTERS_SUCCESS = 'FETCH_SHUTTERS_SUCCESS';\r\nexport const FETCH_SHUTTERS_ERROR = 'FETCH_SHUTTERS_ERROR';\r\n\r\nclass ShutterActions {\r\n    fetchShutters() {\r\n        axios.get('http://localhost:8080/api/shutters').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_SHUTTERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_SHUTTERS_SUCCESS, shutters: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_SHUTTERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n    fetchOrders(userId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ShutterActions();","import dispatcher from './customer.dispatcher';\r\nimport {EventEmitter} from 'events';\r\nimport {\r\n    FETCH_ORDERS_SUCCESS,\r\n    FETCH_ORDERS_ERROR,\r\n    ACCEPT_ORDERS_ERROR,\r\n    DECLINE_ORDERS_ERROR,\r\n    ACCEPT_ORDERS_SUCCESS,\r\n    DECLINE_ORDERS_SUCCESS,\r\n    SAVE_ORDER_ERROR, UPDATE_USER\r\n} from \"./customer.actions\";\r\n\r\nclass CustomerStore extends EventEmitter {\r\n    orders = [];\r\n    error = '';\r\n    userId = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case UPDATE_USER:\r\n                this.userId = action.userId;\r\n                this.emit('userUpdated');\r\n                break;\r\n\r\n            case FETCH_ORDERS_SUCCESS:\r\n                this.orders = action.orders;\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case FETCH_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case SAVE_ORDER_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case ACCEPT_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case DECLINE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case ACCEPT_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'accepted';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DECLINE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'deleted';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getOrders() {\r\n        return this.orders;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n\r\n    getUser() {\r\n        return this.userId;\r\n    }\r\n}\r\n\r\nconst customerStore = new CustomerStore();\r\ndispatcher.register(customerStore.handleActions.bind(customerStore));\r\nexport default customerStore;","import {Dispatcher} from \"flux\";\r\nexport default new Dispatcher();","import dispatcher from './manager.dispatcher';\r\nimport axios from 'axios';\r\nimport CustomerActions from '../customer/customer.actions'\r\n\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_ERROR = 'FETCH_ORDERS_ERROR';\r\n\r\nexport const OK_ORDERS_SUCCESS = 'OK_ORDERS_SUCCESS';\r\nexport const OK_ORDERS_ERROR = 'OK_ORDERS_ERROR';\r\n\r\n/*export const DATED_ORDERS_SUCCESS = 'DATED_ORDERS_SUCCESS';\r\nexport const DATED_ORDERS_ERROR = 'DATED_ORDERS_ERROR';*/\r\n\r\nexport const PAID_ORDERS_SUCCESS = 'PAID_ORDERS_SUCCESS';\r\nexport const PAID_ORDERS_ERROR = 'PAID_ORDERS_ERROR';\r\n\r\n/*export const PRICED_ORDERS_SUCCESS = 'PRICED_ORDERS_SUCCESS';\r\nexport const PRICED_ORDERS_ERROR = 'PRICED_ORDERS_ERROR';*/\r\n\r\nexport const CLOSED_ORDERS_SUCCESS = 'CLOSED_ORDERS_SUCCESS';\r\nexport const CLOSED_ORDERS_ERROR = 'CLOSED_ORDERS_ERROR';\r\n\r\nexport const PRICE_ORDERS_SUCCESS = 'PRICE_ORDERS_SUCCESS';\r\nexport const PRICE_ORDERS_ERROR = 'PRICE_ORDERS_ERROR';\r\n\r\nexport const DATE_ORDERS_SUCCESS = 'DATE_ORDERS_SUCCESS';\r\nexport const DATE_ORDERS_ERROR = 'DATE_ORDERS_ERROR';\r\n\r\nclass ManagerActions {\r\n    fetchOrders() {\r\n        axios.get('http://localhost:8080/api/manager/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    okOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/ok').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: OK_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: OK_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: OK_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    /*datedOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/delete').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: DATED_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: DATED_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: DATED_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }*/\r\n\r\n    paidOrder(orderId, userId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/paid').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PAID_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PAID_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PAID_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    /*pricedOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/priced').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PRICED_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PRICED_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PAID_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }*/\r\n\r\n    closedOrder(orderId, userId) {\r\n        axios.get('http://localhost:8080/api/manager/orders/' + orderId + '/closed/' + userId).then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: CLOSED_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: CLOSED_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n                CustomerActions.fetchOrders(userId);\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: CLOSED_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    priceOrder(orderId, price, userId) {\r\n        axios.post('http://localhost:8080/api/manager/orders/' + orderId + '/' + price + '/update-price/' + userId).then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n                CustomerActions.fetchOrders(userId);\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n    dateOrder(orderId, installationDate) {\r\n        axios.post('http://localhost:8080/api/manager/orders/' + orderId + '/' + installationDate + '/update-installationDate').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: PRICE_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: PRICE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ManagerActions();","import dispatcher from './worker.dispatcher';\r\nimport axios from 'axios';\r\nimport ManagerAction from '../manager/manager.actions'\r\n\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_ERROR = 'FETCH_ORDERS_ERROR';\r\n\r\nexport const TAKE_ORDERS_SUCCESS = 'TAKE_ORDERS_SUCCESS';\r\nexport const TAKE_ORDERS_ERROR = 'TAKE_ORDERS_ERROR';\r\n\r\nexport const DONE_ORDERS_SUCCESS = 'DONE_ORDERS_SUCCESS';\r\nexport const DONE_ORDERS_ERROR = 'DONE_ORDERS_ERROR';\r\n\r\nclass WorkerActions {\r\n\r\n    fetchOrders() {\r\n        axios.get('http://localhost:8080/api/worker/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n\r\n    takeOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/worker/orders/' + orderId + '/take').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: TAKE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: TAKE_ORDERS_SUCCESS, orderId: orderId});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: TAKE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    doneOrder(orderId) {\r\n        axios.get('http://localhost:8080/api/worker/orders/' + orderId + '/done').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: DONE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: DONE_ORDERS_SUCCESS, orderId: orderId});\r\n                ManagerAction.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: DONE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new WorkerActions();","import dispatcher from './customer.dispatcher';\r\nimport axios from 'axios';\r\nimport ShutterActions from '../shutter/shutter.actions';\r\nimport CustomerStore from '../customer/customer.store';\r\nimport ManagerActions from '../manager/manager.actions';\r\nimport WorkerActions from '../worker/worker.actions';\r\n\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\n\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_ERROR = 'FETCH_ORDERS_ERROR';\r\n\r\nexport const ACCEPT_ORDERS_SUCCESS = 'ACCEPT_ORDERS_SUCCESS';\r\nexport const ACCEPT_ORDERS_ERROR = 'ACCEPT_ORDERS_ERROR';\r\n\r\nexport const DECLINE_ORDERS_SUCCESS = 'DECLINE_ORDERS_SUCCESS';\r\nexport const DECLINE_ORDERS_ERROR = 'DECLINE_ORDERS_ERROR';\r\n\r\nexport const SAVE_ORDER_ERROR = 'SAVE_ORDER_ERROR';\r\n\r\nclass CustomerActions {\r\n    updateLoggedInUser(userId) {\r\n        dispatcher.dispatch({type: UPDATE_USER, userId: userId});\r\n    }\r\n\r\n    fetchOrders(userId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: FETCH_ORDERS_SUCCESS, orders: resp.data});\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: FETCH_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    submitOrder(order) {\r\n        axios.post('http://localhost:8080/api/orders', {...order, customerId: CustomerStore.getUser()}).then(resp => {\r\n            if (resp.data.error) {\r\n                dispatcher.dispatch({type: SAVE_ORDER_ERROR, error: resp.data.error});\r\n            } else {\r\n                this.fetchOrders(CustomerStore.getUser());\r\n                ShutterActions.fetchShutters();\r\n                ManagerActions.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: SAVE_ORDER_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    acceptOrder(userId, orderId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders/' + orderId + '/accept').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: ACCEPT_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: ACCEPT_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders(userId);\r\n                WorkerActions.fetchOrders();\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: ACCEPT_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n\r\n    declineOrder(userId, orderId) {\r\n        axios.get('http://localhost:8080/api/customer/' + userId + '/orders/' + orderId + '/decline').then(resp => {\r\n            if (resp.error) {\r\n                dispatcher.dispatch({type: DECLINE_ORDERS_ERROR, error: resp.data.error});\r\n            } else {\r\n                dispatcher.dispatch({type: DECLINE_ORDERS_SUCCESS, orderId: orderId});\r\n                this.fetchOrders(userId)\r\n            }\r\n        }).catch(error => {\r\n            dispatcher.dispatch({type: DECLINE_ORDERS_ERROR, error: error.message});\r\n        });\r\n    }\r\n}\r\n\r\nexport default new CustomerActions();","import {EventEmitter} from \"events\";\r\nimport dispatcher from \"../worker/worker.dispatcher\";\r\nimport {FETCH_SHUTTERS_SUCCESS, FETCH_SHUTTERS_ERROR} from \"./shutter.actions\";\r\n\r\nclass ShutterStore extends EventEmitter {\r\n    shutters = [];\r\n    error = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case FETCH_SHUTTERS_SUCCESS:\r\n                this.shutters = action.shutters;\r\n                this.emit(\"shuttersUpdated\");\r\n                break;\r\n\r\n            case FETCH_SHUTTERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getShutters() {\r\n        return this.shutters;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n}\r\n\r\nconst shutterStore = new ShutterStore();\r\ndispatcher.register(shutterStore.handleActions.bind(shutterStore));\r\nexport default shutterStore;","import React from 'react';\r\nimport CustomerActions from '../../stores/customer/customer.actions';\r\nimport CustomerStore from '../../stores/customer/customer.store';\r\nimport ShutterStore from '../../stores/shutter/shutter.store';\r\nimport ShutterActions from '../../stores/shutter/shutter.actions';\r\n\r\nexport class Customer extends React.Component {\r\n    state = {\r\n        userId: CustomerStore.getUser(),\r\n        orders: CustomerStore.getOrders(),\r\n        error: CustomerStore.getError() || ShutterStore.getError(),\r\n        shutters: ShutterStore.getShutters(),\r\n        formWidth: '',\r\n        formHeight: '',\r\n        formColor: 'White',\r\n        formMaterial: 'Plastic',\r\n        formSelectedPreset: '',\r\n        formNet: 0,\r\n        formUserId: '',\r\n        tmpOrders: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.orders.length === 0 && this.state.userId) {\r\n            CustomerActions.fetchOrders(this.state.userId);\r\n        }\r\n        if (this.state.shutters.length === 0) {\r\n            ShutterActions.fetchShutters();\r\n        }\r\n\r\n        CustomerStore.on('userUpdated', () => {\r\n            this.setState({\r\n                userId: CustomerStore.getUser()\r\n            }, () => {\r\n                if (this.state.userId) {\r\n                    CustomerActions.fetchOrders(this.state.userId);\r\n                }\r\n            });\r\n        });\r\n\r\n        CustomerStore.on('ordersUpdated', () => {\r\n            this.setState({\r\n                orders: CustomerStore.getOrders()\r\n            });\r\n        });\r\n\r\n        CustomerStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: CustomerStore.getError()\r\n            });\r\n        });\r\n\r\n        ShutterStore.on('shuttersUpdated', () => {\r\n            this.setState({\r\n                shutters: ShutterStore.getShutters()\r\n            });\r\n        });\r\n\r\n        ShutterStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: ShutterStore.getError()\r\n            });\r\n        });\r\n    }\r\n\r\n    /*onUserChange = (event) => {\r\n        CustomerActions.updateLoggedInUser(event.target.value);\r\n    };\r\n\r\n\r\n    onLoginClick = (event) => {\r\n        CustomerActions.updateLoggedInUser(event.target.value);\r\n    };*/\r\n\r\n    onUserChange = (event) => {\r\n        this.setState({\r\n            formUserId: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n    onSizeChange = (event) => {\r\n        const val = event.target.value;\r\n        this.setState({\r\n            formSelectedPreset: event.target.value,\r\n        });\r\n        if (val) {\r\n            const [width, height] = val.split('x');\r\n            this.setState({\r\n                formWidth: width,\r\n                formHeight: height\r\n            });\r\n        }\r\n    };\r\n\r\n    onHeightChange = (event) => {\r\n        this.setState({\r\n            formSelectedPreset: '',\r\n            formHeight: event.target.value\r\n        });\r\n    };\r\n\r\n    onWidthChange = (event) => {\r\n        this.setState({\r\n            formSelectedPreset: '',\r\n            formWidth: event.target.value\r\n        });\r\n    };\r\n\r\n    onColorChange = (event) => {\r\n        this.setState({\r\n            formColor: event.target.value\r\n        });\r\n    }\r\n\r\n    onMaterialChange = (event) => {\r\n        this.setState({\r\n            formMaterial: event.target.value\r\n        });\r\n    }\r\n\r\n    onNetChange = (event) => {\r\n        this.setState({\r\n            formNet: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!this.state.formWidth || !this.state.formHeight || !this.state.formColor || !this.state.formMaterial) {\r\n            alert('Hiányzó adat!');\r\n            return;\r\n        }\r\n\r\n        const order = {\r\n            shutter: {\r\n                width: parseInt(this.state.formWidth),\r\n                height: parseInt(this.state.formHeight),\r\n            },\r\n            shutterNet: this.state.formNet,\r\n            shutterColor: this.state.formColor,\r\n            shutterMaterial: this.state.formMaterial,\r\n            width: parseInt(this.state.formWidth),\r\n            height: parseInt(this.state.formHeight),\r\n            color: this.state.formColor,\r\n            material: this.state.formMaterial,\r\n            isNet: this.state.formNet\r\n        };\r\n\r\n        this.setState({\r\n            tmpOrders: this.state.tmpOrders.concat(order)\r\n        });\r\n    };\r\n\r\n    onOrder = () => {\r\n        this.state.tmpOrders.forEach(e => {\r\n            CustomerActions.submitOrder(e);\r\n        });\r\n\r\n        this.setState({\r\n           tmpOrders: []\r\n        });\r\n    };\r\n\r\n    onDeleteOrderItem = (i) => {\r\n        this.setState({\r\n           tmpOrders: this.state.tmpOrders.filter((e, index) => i !== index) //végigmegy az összes elemen, visszaadjuk az összes elemet aminek az indexe nem egyenlő azzal amit én megadtam (i)\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"customer-wrapper\">\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                {this.state.userId === '' ?\r\n\r\n                    <div className=\"row \">\r\n                        <div className=\"col-md-2\"><h5>Please Log in!</h5></div>\r\n                        <div className=\"col-md-2\">\r\n                            {/*<select className=\"form-control\" value={this.state.userId} onChange={this.onUserChange}>\r\n                                <option value=\"\">Logged out</option>\r\n                                <option value=\"1\">Customer 1</option>\r\n                                <option value=\"2\">Customer 2</option>\r\n                            </select>*/}\r\n                            <input onChange={this.onUserChange} value={this.state.formUserId}\r\n                                   type=\"string\"\r\n                                   className=\"form-control\"/>\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            <button className=\"btn btn-primary\"\r\n                                    onClick={() => CustomerActions.updateLoggedInUser(this.state.formUserId)}>\r\n                                Login\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <h2>Welcome {this.state.userId}!</h2>\r\n                    </div>\r\n                }\r\n\r\n\r\n                {\r\n                    this.state.userId ?\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-md-8\">\r\n                                <h2>Shopping Cart</h2>\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"table table-condensed table-striped\">\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th>Size</th>\r\n                                            <th>Net</th>\r\n                                            <th>Color</th>\r\n                                            <th>Material</th>\r\n                                            <th></th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {this.state.tmpOrders.map((value, i) => {\r\n                                            return (\r\n                                                <tr key={i}>\r\n                                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                                    <td>{value.shutterColor}</td>\r\n                                                    <td>{value.shutterMaterial}</td>\r\n                                                    <td>\r\n                                                        <button onClick={() => this.onDeleteOrderItem(i)} className=\"btn btn-danger\">Törlés</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n                                    {this.state.tmpOrders.length > 0 ? <button onClick={() => this.onOrder()} className=\"btn btn-danger\">Rendelés</button> : null}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-8\">\r\n                                <h2>Orders </h2>\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"table table-condensed table-striped\">\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th>Order ID</th>\r\n                                            <th>Size</th>\r\n                                            <th>Net</th>\r\n                                            <th>Color</th>\r\n                                            <th>Material</th>\r\n                                            <th>Price Offer</th>\r\n                                            <th></th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {this.state.orders.map((value, i) => {\r\n                                            if (value.status !== 'declined') return (\r\n                                                <tr key={i}>\r\n                                                    <td>{value._id}</td>\r\n                                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                                    <td>{value.shutterColor}</td>\r\n                                                    <td>{value.shutterMaterial}</td>\r\n                                                    <td>{value.price}</td>\r\n                                                    <td>\r\n                                                        {value.status === 'priced' //&& value.price !== null//\r\n                                                            ?\r\n                                                            <div>\r\n                                                                <button type=\"button\"\r\n                                                                        className=\"btn btn-success btn-block\"\r\n                                                                        onClick={() => CustomerActions.acceptOrder(this.state.userId, value._id)}>\r\n                                                                    Accept\r\n                                                                </button>\r\n                                                                <button type=\"button\"\r\n                                                                        className=\"btn btn-danger btn-block\"\r\n                                                                        onClick={() => CustomerActions.declineOrder(this.state.userId, value._id)}>\r\n                                                                    Decline\r\n                                                                </button>\r\n                                                            </div>\r\n                                                            :\r\n                                                            null\r\n                                                        }\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {value.installationDate ?\r\n                                                            <div>{value.installationDate}</div>\r\n                                                            :\r\n                                                            null}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"col-md-4\">\r\n                                <h2>New Item</h2>\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Shutter types</label>\r\n                                        <select onChange={this.onSizeChange} value={this.state.formSelectedPreset}\r\n                                                className=\"form-control\" name=\"\" id=\"\">\r\n                                            <option value=\"\">Sizes</option>\r\n                                            {this.state.shutters.map((val, i) => {\r\n                                                return <option key={i}\r\n                                                               value={val.width + 'x' + val.height}>{val.width} x {val.height}</option>\r\n                                            })};\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Height</label>\r\n                                        <input onChange={this.onHeightChange} value={this.state.formHeight}\r\n                                               type=\"number\" min=\"1\"\r\n                                               className=\"form-control\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Width</label>\r\n                                        <input onChange={this.onWidthChange} value={this.state.formWidth} type=\"number\"\r\n                                               min=\"1\"\r\n                                               className=\"form-control\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Color</label>\r\n                                        <select onChange={this.onColorChange} name=\"\" id=\"\" value={this.state.formColor}\r\n                                                className=\"form-control\">\r\n                                            <option value=\"White\">White</option>\r\n                                            <option value=\"Black\">Black</option>\r\n                                            <option value=\"Brown\">Brown</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Material</label>\r\n                                        <select onChange={this.onMaterialChange} name=\"\" id=\"\"\r\n                                                value={this.state.formMaterial}\r\n                                                className=\"form-control\">\r\n                                            <option value=\"Plastic\">Plastic</option>\r\n                                            <option value=\"Aluminium\">Aluminium</option>\r\n                                            <option value=\"Wood\">Wood</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Net</label>\r\n                                        <select onChange={this.onNetChange} name=\"\" id=\"\" value={this.state.formNet}\r\n                                                className=\"form-control\">\r\n                                            <option value=\"1\">Yes</option>\r\n                                            <option value=\"0\">No</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <button className=\"btn btn-primary\">Add to cart</button>\r\n                                </form>\r\n                            </div>\r\n\r\n                            {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n                            <h2>Invoices</h2>\r\n                             <div className=\"table-responsive\">\r\n                                <table className=\"table table-condensed table-striped table-dark\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th>OrderID</th>\r\n                                        <th>Size</th>\r\n                                        <th>Net</th>\r\n                                        <th>Color</th>\r\n                                        <th>Material</th>\r\n                                        <th>Price</th>\r\n                                        <th>Installation Date</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.state.orders.filter(e => e.status === 'closed').map((value, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td>{value._id}</td>\r\n                                                <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                                <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                                <td>{value.shutterColor}</td>\r\n                                                <td>{value.shutterMaterial}</td>\r\n                                                <td>{value.price}</td>\r\n                                                <td>{value.installationDate}</td>\r\n                                                <td>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                    </tbody>\r\n                                </table>\r\n\r\n                            </div>\r\n                        </div>\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import dispatcher from './worker.dispatcher';\r\nimport {EventEmitter} from 'events';\r\nimport {\r\n    FETCH_ORDERS_SUCCESS,\r\n    FETCH_ORDERS_ERROR,\r\n    TAKE_ORDERS_ERROR,\r\n    DONE_ORDERS_ERROR,\r\n    TAKE_ORDERS_SUCCESS,\r\n    DONE_ORDERS_SUCCESS\r\n} from \"./worker.actions\";\r\n\r\nclass WorkerStore extends EventEmitter {\r\n    orders = [];\r\n    error = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case FETCH_ORDERS_SUCCESS:\r\n                this.orders = action.orders;\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case FETCH_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case TAKE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case DONE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case TAKE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'taken';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DONE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'done';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getOrders() {\r\n        return this.orders;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n\r\n}\r\n\r\nconst workerStore = new WorkerStore();\r\ndispatcher.register(workerStore.handleActions.bind(workerStore));\r\nexport default workerStore;","import React from \"react\";\r\nimport WorkerStore from \"../../stores/worker/worker.store\";\r\nimport WorkerActions from \"../../stores/worker/worker.actions\"\r\n\r\nexport class Worker extends React.Component {\r\n\r\n    state = {\r\n        orders: WorkerStore.getOrders(),\r\n        error: WorkerStore.getError(),\r\n        louverAmount: 0,\r\n        cordLength: 0,\r\n        dye: 0,\r\n        screwAmount: 0,\r\n        material: \"\",\r\n        color: \"\",\r\n        net:0,\r\n        netSize: 0,\r\n        orderId: 0\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.orders.length === 0) {\r\n            WorkerActions.fetchOrders();\r\n        }\r\n\r\n        WorkerStore.on('ordersUpdated', () => {\r\n            this.setState({\r\n                orders: WorkerStore.getOrders()\r\n            });\r\n        });\r\n\r\n\r\n        WorkerStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: WorkerStore.getError()\r\n            });\r\n        });\r\n    }\r\n\r\n    onClickRow = (selectedRow) => {\r\n        const louverAmount = Math.floor(selectedRow.shutter.height / 5);\r\n        const cordLength = selectedRow.shutter.height * 2;\r\n        const dye = selectedRow.shutter.width / 20;\r\n        const screwAmount = Math.floor(selectedRow.shutter.width /20);\r\n        const netSize = Math.floor((selectedRow.shutter.height + selectedRow.shutter.width)*1.1)\r\n        this.setState({\r\n            selectedRow: selectedRow,\r\n            louverAmount: louverAmount,\r\n            cordLength: cordLength,\r\n            dye: dye,\r\n            screwAmount: screwAmount,\r\n            material: selectedRow.shutterMaterial,\r\n            color:selectedRow.shutterColor,\r\n            net:selectedRow.shutterNet,\r\n            netSize: netSize,\r\n            orderId : selectedRow._id\r\n        });\r\n    };\r\n\r\n    onClickDone = (event, i) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            selectedRow: null,\r\n        }, () => {\r\n            WorkerActions.doneOrder(i);\r\n            console.log(this.state.selectedRow)\r\n        });\r\n    };\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <div className=\"worker-wrapper\">\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <h2>Orders</h2>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-condensed table-striped\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Order ID</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.state.orders.map((value, i) => {\r\n                                    if (value.status === 'accepted')return (\r\n                                        <tr key={i}>\r\n                                            <td>{value._id}</td>\r\n                                            <td>\r\n                                                {value.status === 'accepted'\r\n                                                    ?\r\n                                                    <div>\r\n                                                        <button className=\"btn btn-primary\" onClick={() => WorkerActions.takeOrder(value._id)}>\r\n                                                           Take Order!\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    :\r\n                                                    null\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div><div className=\"col-md-8\">\r\n                        <h2>My Jobs</h2>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-condensed table-striped\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Order Informations</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.state.orders.map((value, i) => {\r\n                                    if (value.status === 'taken') return (\r\n                                        <tr key={i} onClick={this.onClickRow.bind(this ,value)}>\r\n                                            <td>{value._id}</td>\r\n                                            <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                            <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                            <td>{value.shutterColor}</td>\r\n                                            <td>{value.shutterMaterial}</td>\r\n                                            <td>{value.status}</td>\r\n                                            <td>\r\n                                                {value.status === 'taken'\r\n                                                    ?\r\n                                                    <div>\r\n                                                        <button className=\"btn btn-primary\" onClick={(event) => this.onClickDone(event, value._id)}>\r\n                                                            Done!\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    :\r\n                                                    null\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    { !this.state.selectedRow ?\r\n                        null\r\n                        :\r\n                        <div>\r\n                            <div className=\"card text-white bg-dark col-md-6\">\r\n                                <div className=\"card-header text-dark bg-light\">\r\n                                    Required Parts\r\n                                    ({this.state.orderId})\r\n                                </div>\r\n                                <ul className=\"list-group list-group-flush \">\r\n                                    <li className=\"list-group-item text-white bg-dark\">Screw x {this.state.screwAmount}</li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">{this.state.louverAmount} {this.state.material} louvers</li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">Cord : {this.state.cordLength} cm</li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">{this.state.dye} Deciliter {this.state.color} dye </li>\r\n                                    <li className=\"list-group-item text-white bg-dark\">Mosquito net: {this.state.net ? 'Yes, ' : 'No' } {this.state.net ? this.state.netSize + ' cm ' : null } </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import dispatcher from './manager.dispatcher';\r\nimport {EventEmitter} from 'events';\r\nimport {\r\n    FETCH_ORDERS_SUCCESS,\r\n    FETCH_ORDERS_ERROR,\r\n    OK_ORDERS_ERROR,\r\n    // DATED_ORDERS_ERROR,\r\n    OK_ORDERS_SUCCESS,\r\n    // DATED_ORDERS_SUCCESS,\r\n    PAID_ORDERS_ERROR,\r\n    CLOSED_ORDERS_ERROR,\r\n    PAID_ORDERS_SUCCESS,\r\n    CLOSED_ORDERS_SUCCESS,\r\n    PRICE_ORDERS_ERROR,\r\n    PRICE_ORDERS_SUCCESS,\r\n    DATE_ORDERS_ERROR,\r\n    DATE_ORDERS_SUCCESS\r\n} from \"./manager.actions\";\r\n\r\nclass ManagerStore extends EventEmitter {\r\n    orders = [];\r\n    error = '';\r\n\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            case FETCH_ORDERS_SUCCESS:\r\n                this.orders = action.orders;\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case FETCH_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case OK_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'ok';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case OK_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            /*case DATED_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'dated';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DATED_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;*/\r\n\r\n            case PAID_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'paid';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case PAID_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case CLOSED_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).status = 'closed';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case CLOSED_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            case PRICE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).price = action.price;\r\n                this.orders.find(e => e._id === action.orderId).status = 'priced';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case PRICE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n                case DATE_ORDERS_SUCCESS:\r\n                this.orders.find(e => e._id === action.orderId).installationDate = action.installationDate;\r\n                this.orders.find(e => e._id === action.orderId).status = 'dated';\r\n                this.emit(\"ordersUpdated\");\r\n                break;\r\n\r\n            case DATE_ORDERS_ERROR:\r\n                this.error = action.error;\r\n                this.emit(\"errorUpdated\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getOrders() {\r\n        return this.orders;\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n}\r\n\r\nconst managerStore = new ManagerStore();\r\ndispatcher.register(managerStore.handleActions.bind(managerStore));\r\nexport default managerStore;","import React from \"react\";\r\nimport ManagerStore from \"../../stores/manager/manager.store\";\r\nimport ManagerActions from \"../../stores/manager/manager.actions\";\r\n\r\nexport class Manager extends React.Component {\r\n\r\n    state = {\r\n        orders: ManagerStore.getOrders(),\r\n        error: ManagerStore.getError(),\r\n        formDate: '',\r\n        formPrice: '',\r\n        formStatus: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.orders.length === 0) {\r\n            ManagerActions.fetchOrders();\r\n        }\r\n\r\n        ManagerStore.on('ordersUpdated', () => {\r\n            this.setState({\r\n                orders: ManagerStore.getOrders()\r\n            });\r\n        });\r\n\r\n        ManagerStore.on('errorUpdated', () => {\r\n            this.setState({\r\n                error: ManagerStore.getError()\r\n            });\r\n        });\r\n    }\r\n\r\n    onPriceChange = (event) => {\r\n        this.setState({\r\n            formPrice: event.target.value\r\n        });\r\n    };\r\n\r\n    onDateChange = (event) => {\r\n        this.setState({\r\n            formDate: event.target.value\r\n        });\r\n    };\r\n\r\n    onStatusChange = (event) => {\r\n        this.setState({\r\n            formStatus: event.target.value\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"manager-wrapper\">\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <h2>Set Prices</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerID</th>\r\n                            <th>Size</th>\r\n                            <th>Net</th>\r\n                            <th>Color</th>\r\n                            <th>Material</th>\r\n                            <th>Price</th>\r\n                            <th></th>\r\n                            <th><input onChange={this.onPriceChange} value={this.state.formPrice}\r\n                                            type=\"number\" min='1'\r\n                                            className=\"form-control\"/>\r\n                            </th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'pending' && value.price !== 0)return(\r\n\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                    <td>{value.shutterColor}</td>\r\n                                    <td>{value.shutterMaterial}</td>\r\n                                    <td>{value.price}</td>\r\n                                    <td>{value.status}</td>\r\n                                    <td>\r\n\r\n                                    </td>\r\n                                    <td>\r\n                                        <button className=\"btn btn-success\" onClick={() => ManagerActions.priceOrder(value._id, this.state.formPrice, value.customerId)}>\r\n                                            Offer!\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                <h2>Accept jobs</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'done') return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>\r\n                                        <button  className=\"btn btn-light\" onClick={() => ManagerActions.okOrder(value._id)}>\r\n                                            Accept Job!\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                <h2>Organize Installation</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerId</th>\r\n                            <th>Date</th>\r\n                            <th></th>\r\n                            <th><input onChange={this.onDateChange} value={this.state.formDate}\r\n                                       type=\"date\"\r\n                                       className=\"form-control\"/>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'ok' || value.status === 'dated') return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.installationDate}</td>\r\n                                    <td></td>\r\n                                    <td>\r\n\r\n                                        {value.status === 'dated' ?\r\n                                            <button className=\"btn btn-outline-success btn-block\" onClick={() => ManagerActions.paidOrder(value._id)}>\r\n                                                Paid!\r\n                                            </button>\r\n                                        :\r\n                                            <button className=\"btn btn-outline-warning btn-block\" onClick={() => ManagerActions.dateOrder(value._id, this.state.formDate)}>\r\n                                                Set Date!\r\n                                            </button>\r\n                                       }\r\n\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <h2>Close Order / Create Invoice</h2>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerID</th>\r\n                            <th>Size</th>\r\n                            <th>Net</th>\r\n                            <th>Color</th>\r\n                            <th>Material</th>\r\n                            <th>Price</th>\r\n                            <th>Date</th>\r\n                            <th>Status</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            if (value.status === 'paid')return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                    <td>{value.shutterColor}</td>\r\n                                    <td>{value.shutterMaterial}</td>\r\n                                    <td>{value.price}</td>\r\n                                    <td>{value.installationDate}</td>\r\n                                    <td>{value.status}</td>\r\n                                    <td>\r\n                                        <button className=\"btn btn-primary\" onClick={() => ManagerActions.closedOrder(value._id)}>\r\n                                           Create Invoice!\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n\r\n\r\n                {this.state.error ? <div className=\"alert alert-danger\">{this.state.error}</div> : null}\r\n\r\n                <h2>Statistics</h2>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <select onChange={this.onStatusChange} value={this.state.formStatus}\r\n                                className=\"form-control\" name=\"\" id=\"\">\r\n                            <option value=\"\">Status</option>\r\n                            {this.state.orders.reduce((prev, val) => {\r\n                                if(!prev.find(e => e === val.status)) {\r\n                                    prev.push(val.status);\r\n                                }\r\n\r\n                                return prev;\r\n                            }, []).map((val, i) => {\r\n                                return <option key={i} value={val}>{val}</option>\r\n                            })};\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-4\">\r\n                        {this.state.orders.filter(e => e.status === this.state.formStatus).length}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-condensed table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>OrderID</th>\r\n                            <th>CustomerID</th>\r\n                            <th>Size</th>\r\n                            <th>Net</th>\r\n                            <th>Color</th>\r\n                            <th>Material</th>\r\n                            <th>Date</th>\r\n                            <th>Price</th>\r\n                            <th>Status</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.orders.map((value, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{value._id}</td>\r\n                                    <td>{value.customerId}</td>\r\n                                    <td>{value.shutter ? value.shutter.width : ''} x {value.shutter ? value.shutter.height : ''}</td>\r\n                                    <td>{value.shutterNet ? 'Yes' : 'No'}</td>\r\n                                    <td>{value.shutterColor}</td>\r\n                                    <td>{value.shutterMaterial}</td>\r\n                                    <td>{value.installationDate}</td>\r\n                                    <td>{value.price}</td>\r\n                                    <td>{value.status}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Route, BrowserRouter as Router, Link} from \"react-router-dom\";\nimport {Customer} from \"./modules/customer/Customer\";\nimport {Worker} from \"./modules/worker/Worker\";\nimport {Manager} from \"./modules/manager/Manager\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n          <Router>\n              <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                  <a className=\"navbar-brand\" href=\"./\"><span role=\"image\" aria-label=\"bee\">🐝</span>BeeShutter! BeeAwesome!</a>\n                  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                          data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                          aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                      <span className=\"navbar-toggler-icon\"></span>\n                  </button>\n\n                  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                      <ul className=\"navbar-nav mr-auto\">\n                          <li className=\"nav-item\">\n                              <Link className=\"nav-link\" to=\"/\">\n                                  Customer\n                              </Link>\n                          </li>\n                          <li className=\"nav-item\">\n                              <Link className=\"nav-link\" to=\"/worker\">\n                                  Worker\n                              </Link>\n                          </li>\n                          <li className=\"nav-item\">\n                              <Link className=\"nav-link\"  to=\"/manager\">\n                                  Manager\n                              </Link>\n                          </li>\n                      </ul>\n                  </div>\n              </nav>\n              <Route exact path=\"/\" component={Customer}/>\n              <Route exact path=\"/worker\" component={Worker}/>\n              <Route exact path=\"/manager\" component={Manager}/>\n          </Router>\n\n\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}